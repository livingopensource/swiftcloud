{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SwiftCloud","text":"<p>Introducing <code>SwiftCloud\u2014</code>your ultimate digital workshop where cloud technologies meet effortless control and unmatched efficiency. SwiftCloud gives you super-powers that makes managing and building in the cloud as simple as pressing a button. All the pieces that make up the SwiftCloud platform are diligently selected to give you the best user experience, availability, and take you from prototyping to production with with ease.</p> <p>We strive to keep our documentation as clear and concise as possible.</p>","tags":["Architecure","Philosophy"]},{"location":"#what-is-swiftcloud","title":"What is SwiftCloud?","text":"<p>Think of SwiftCloud as your personal cloud genie, granting you the ability to create and manage powerful digital environments with ease. Whether you're a developer crafting the next big app or a business navigating complex data needs, SwiftCloud makes it all possible without breaking a sweat.</p>","tags":["Architecure","Philosophy"]},{"location":"#control-like-never-before","title":"Control Like Never Before","text":"<p>Become the captain of your own spaceship. SwiftCloud hands you the controls to navigate your digital universe exactly how you want. It\u2019s built to handle high-stakes missions\u2014whether you're running a high-traffic website or managing an app with seasonal traffic spikes. We have the solution and the scale for your needs.</p>","tags":["Architecure","Philosophy"]},{"location":"#affordable-and-local","title":"Affordable and Local","text":"<p>Why pay for more than you need? With SwiftCloud, you get a local, cost-effective solution that doesn\u2019t skimp on quality. It\u2019s like having a high-tech workshop right in your garage\u2014ready to build and innovate without the hefty price tag. And all this comes with local data residency, so you can rest assured your data is safe, secure and close to your users.</p>","tags":["Architecure","Philosophy"]},{"location":"#empowering-innovators","title":"Empowering Innovators","text":"<p>We\u2019re on a mission to democratize cutting-edge technology. SwiftCloud is designed to make advanced cloud tools accessible to everyone\u2014from passionate developers to ambitious startups. Imagine turning your groundbreaking ideas into reality with a platform that makes complex technology as easy as your first \"Hello World\" program.</p>","tags":["Architecure","Philosophy"]},{"location":"#simplicity-at-its-core","title":"Simplicity at Its Core","text":"<p>With SwiftCloud, simplicity is the name of the game. Picture a user interface so intuitive, it feels like it\u2019s reading your mind. Our platform makes it a breeze to deploy and manage applications, so you can focus on what really matters: creating and innovating.</p>","tags":["Architecure","Philosophy"]},{"location":"#summary","title":"Summary","text":"<p>Unleash your potential with <code>SwiftCloud\u2014</code>where sophisticated technologies meets effortless control. It\u2019s your gateway to a world of cloud computing that\u2019s local, affordable, and as simple as you can imagine. Step into the future of development with a platform that\u2019s designed to make your digital journey smooth and exciting.</p> SwiftCloud <p>A trully developer first cloud platform. This is not a product, its a factory of innovation.</p>","tags":["Architecure","Philosophy"]},{"location":"#architecural-design-philosophy","title":"Architecural Design Philosophy","text":"<p>SwiftCloud is built with scale, resilience, fault torelance and high availability in mind. To achieve all this, we expect your apps to follow the methodology of 12 factor apps to get the most out of our platform.</p>","tags":["Architecure","Philosophy"]},{"location":"#platform-services","title":"Platform Services","text":"<p>SwiftCloud is a platform that provides a range of services to help you manage your cloud infrastructure. These services include:</p> Service Description Domain Registration &amp; Management A service for managing and creation of domains. Database As A Service A service that provides management and provisioning of databases. HA Virtual Machines A service that provides highly available virtual machines. Web Services A service that provides serverless web services.","tags":["Architecure","Philosophy"]},{"location":"billing/","title":"Billing","text":""},{"location":"cluster-manager/","title":"Cluster Manager","text":"<p>The Swift Cluster Manager is a service that is used to communcate with the kubernetes clusters.</p> <p>The system philosophy is to have an independent kubernetes cluster for each services, i.e:</p> <ul> <li>Postgres Cluster</li> <li>MySQL Cluster</li> </ul> <p>This service provides a RESTful service to communicate with the right cluster depending on the service being referred to.</p>"},{"location":"dbaas/","title":"Databases","text":""},{"location":"dbaas/#the-future-of-data-management","title":"The Future of Data Management","text":"<p>Serverless databases offer a revolutionary approach to data management, eliminating the need for traditional database administration. By focusing on your data and applications, you can significantly reduce operational overhead and accelerate development cycles.</p> <ul> <li> Scalability: Automatically adjust to changing data loads, ensuring optimal performance without manual intervention.</li> <li> Cost Efficiency: Pay only for the resources consumed, eliminating the need for upfront investments or overprovisioning.</li> <li> Ease of Use: Seamless integration with modern development frameworks and tools, simplifying database management tasks.</li> <li> Reliability: Benefit from built-in redundancy and fault tolerance, ensuring high availability and data durability.</li> </ul> <p>Introducing <code>SwiftCloud Database Service\u2014</code>the ultimate database solution that puts you in the driver\u2019s seat, offering effortless control over your data. Whether you\u2019re managing a bustling e-commerce site or building a sleek new app, our platform makes it easier than ever to handle your data needs.</p>"},{"location":"dbaas/#what-is-swiftcloud-database-service","title":"What is SwiftCloud Database Service?","text":"<p>Picture SwiftCloud Database Service as your personal data superhero. It\u2019s a cloud-based platform that gives you powerful, managed databases without the hassle. Whether you prefer <code>MySQL</code> or <code>PostgreSQL</code>, our service has got you covered, making data management as simple as pie.</p>"},{"location":"dbaas/#two-database-superpowers","title":"Two Database SuperPowers","text":"<p>Imagine having two of the most popular database technologies at your fingertips, each one ready to tackle your unique needs:</p> <ul> <li> <p>MySQL: Known for its speed and reliability, it\u2019s perfect for handling everything from small projects to large-scale applications. Think of it as the reliable workhorse of your data operations.</p> </li> <li> <p>PostgreSQL: This one\u2019s all about flexibility and advanced features, making it ideal for complex queries and large data sets. It\u2019s like having a Swiss Army knife for your database needs.</p> </li> </ul>"},{"location":"dbaas/#effortless-control-and-management","title":"Effortless Control and Management","text":"<p>With <code>SwiftCloud Database Service</code>, you\u2019re in charge without having to get your hands dirty. Imagine having a remote control for your database\u2014easy to set up, manage, and monitor, all from a sleek, user-friendly interface. No more wrestling with server setups or database configurations. Just smooth sailing from start to finish.</p>"},{"location":"dbaas/#affordable-and-local","title":"Affordable and Local","text":"<p>Why spend a fortune on database infrastructure? SwiftCloud offers a cost-effective solution that keeps your data close to home. You get the power and performance you need without the hefty price tag, making it perfect for businesses of all sizes.</p>"},{"location":"dbaas/#empowering-your-projects","title":"Empowering Your Projects","text":"<p>Our mission is to empower you to focus on what matters most: your projects. <code>SwiftCloud Database Service</code> lets you concentrate on building amazing applications, while we handle the nitty-gritty of database management. It\u2019s like having a trusted partner who ensures your data is always secure and ready to go.</p>"},{"location":"dbaas/#simplicity-at-its-finest","title":"Simplicity at Its Finest","text":"<p>Simplicity is our mantra. With <code>SwiftCloud</code>, managing databases is as easy as clicking a few buttons. Whether you\u2019re a seasoned developer or just getting started, our platform makes handling MySQL and PostgreSQL straightforward and intuitive.</p>"},{"location":"dbaas/#summary","title":"Summary","text":"<p>Step into a world of effortless data management with <code>SwiftCloud Database Service</code>. It\u2019s your go-to solution for reliable, scalable, and cost-effective database management, offering both MySQL and PostgreSQL with unmatched ease. With our service, you get the power of advanced databases without the complexity\u2014leaving you free to focus on creating and innovating. Welcome to the future of database management, made simple.</p>"},{"location":"domain/","title":"Overview","text":""},{"location":"domain/#epp","title":"EPP","text":"<p>An application that exposes EPP (Extensible Provisioning Protocol) via RESTful API.</p> <p>Underneath the hood, the application service uses EPP (Extensible Provisioning Protocol) to communicate with the Domain registry and expose REST endoints.</p> <pre><code>\nsequenceDiagram\nparticipant A as REST\nparticipant B as EPP\nparticipant C as Registrar\n\nA-&gt;&gt;B: Connect to EPP server (registry.zicta.zm)\nB-&gt;&gt;C: Issue login, perform operation and logout\nC--&gt;&gt;B: Response (XML)\nB--&gt;&gt;A: Response (JSON)\n</code></pre>"},{"location":"domain/#epp-extensible-provisioning-protocol","title":"EPP (Extensible Provisioning Protocol)","text":"<p>EPP stands for Extensible Provisioning Protocol. It is a protocol used for communication between domain name registries and registrars for provisioning domain name registrations. </p> <p>Some key aspects of EPP:</p> <ul> <li> <p>EPP is a XML-based protocol that uses a client-server architecture. Registrars act as EPP clients that connect to the EPP server operated by the registry.</p> </li> <li> <p>EPP supports a wide range of domain name provisioning operations like check availability, register, renew, delete etc. </p> </li> <li> <p>EPP is extensible - it provides a framework that can be extended with new features and functions through XML schemas.</p> </li> <li> <p>EPP provides a secure and standardized way for registrars to manage domain names on behalf of registrants.</p> </li> </ul> <p>In summary, EPP enables automation and standardization of domain name provisioning between registries and registrars.</p>"},{"location":"domain/#epp-users","title":"EPP Users","text":"<ul> <li> <p>A registrant is the individual or organization that registers and owns a domain name. The registrant purchases the domain name from a registrar.</p> </li> <li> <p>A registry operates the top-level domain (like .com, .net, .org etc) and maintains the directory of domain names registered in that TLD. The registry operates the EPP server that registrars connect to for domain name operations.</p> </li> <li> <p>A registrar is an accredited business that sells domain names to registrants. Registrars connect to the registries EPP server to perform domain name registration and management on behalf of registrants.</p> </li> </ul>"},{"location":"domain/#epp-implementation","title":"EPP Implementation","text":"<p>The epp client implements EPP by opening a raw TCP (not HTTP) connection to the EPP server on port 700 (default port 700, but can be any other port). Once the connection is established, the client can send EPP XML commands and receive XML responses over this TCP connection.</p> <p>This allows the epp client to communicate with the EPP server using the standardized EPP protocol. The client handles connecting to the server, sending requests, parsing responses and returning the results to the calling application.</p> <p>Every TCP connection will have its own session. The session is maintained by the EPP server. The session is used to maintain the state of the connection and all operations that are to be performed, should be done within a sinlge TCP connection.</p> <p>Below diagrams shows how a domain registrar with a payment option process would flow in such a setup.</p>"},{"location":"domain/#epp-with-payment-integration","title":"EPP With Payment Integration","text":"<pre><code>    sequenceDiagram\n        Registrar-&gt;&gt;Registry: Search for Domain\n        Registry--&gt;&gt;Registrar: Search Result\n        alt PaymentSuccess\n            Registrar-&gt;&gt;Registry: Register/Renew domain\n            Registry--&gt;&gt;Registrar: Registration Success Response\n            Registrar--&gt;&gt;NameServers: Create DNS Zone\n        else PaymentFailure\n            Registrar-&gt;&gt;Registry: Register/Renew domain\n            Registry--&gt;&gt;Registrar: Registration Failure Response\n        end</code></pre>"},{"location":"domains/","title":"DNS","text":""},{"location":"domains/#what-is-swiftcloud-dns","title":"What is SwiftCloud DNS?","text":"<p>In a world where digital presence is paramount, think of SwiftCloud DNS as your digital compass, guiding your online presence with precision and reliability. It\u2019s more than just a DNS service; it\u2019s a holistic domain management ecosystem designed to keep your websites fast, secure, and always accessible. From intricate domain configurations to lightning-fast DNS resolutions, SwiftCloud DNS is built to elevate your digital operations to new heights.</p>"},{"location":"domains/#scalable-solutions","title":"Scalable Solutions","text":"<p>From startups to enterprises, SwiftCloud DNS scales with your needs. Whether you\u2019re handling a few domains or managing a global network, our solutions grow with you. Enjoy the flexibility to adapt your DNS infrastructure as your business evolves, without compromising on performance or reliability.</p>"},{"location":"domains/#managing-domains-with-ease","title":"Managing Domains with Ease","text":"<p>Here, you can effortlessly manage your domains, including adding, editing, and deleting records. Our intuitive interface ensures that even the most complex domain configurations are a breeze to handle.</p>"},{"location":"domains/#view-all-domains","title":"View All Domains","text":"<p>The domain name list has a forward arrow to view the domain records</p>"},{"location":"domains/#domain-management","title":"Domain Management","text":""},{"location":"domains/#create-domain-record","title":"Create Domain Record","text":"<p>Add the content of the record in the text box and click on the save button. Then wait for propagation to complete.</p>"},{"location":"domains/#add-multiple-domain-records","title":"Add Multiple Domain Records","text":"<p>The platform allows one to add muliple IPs to the same domain record. This is ideal in a scenario where you want to do DNS load balancing.</p>"},{"location":"domains/#in-summary","title":"In Summary","text":"<p>SwiftCloud DNS represents the pinnacle of domain and DNS infrastructure. With its combination of smart management, blazing-fast speed, advanced security (DNSSEC), and seamless integration, SwiftCloud DNS is your gateway to a superior digital experience. Step into the future of domain management with SwiftCloud DNS, where innovation and excellence converge.</p>"},{"location":"mysql/","title":"MySQL","text":"<p>The MySQL Database As A Service (DBaaS) is built on top of kubernetes using the official Oracle MySQL operator.</p>"},{"location":"notification/","title":"Notifications","text":"<p>Notifications service is a RESTful API for sending notifications to users.</p>"},{"location":"notification/#prerequisites","title":"Prerequisites","text":"<ul> <li> Kubernetes: A kubernetes cluster running version v1.25 or higher.</li> <li> Knative Eventing: A Knative Eventing running version v1.15 or higher.</li> <li> Ory Kratos: A Ory Kratos instance running version v1.2.0 or higher.</li> <li> Ory Keto: A Ory Keto instance running version v0.15.0 or higher.</li> <li> Knative Serving: A Knative Serving instance running version 1.15 or higher.</li> <li> Cloud Native PostgreSQL: CNPG version v1.24.0 or higher</li> <li> KubeVirt: A KubeVirt instance running version v1.2.0 or higher</li> </ul>"},{"location":"notification/#api-conventions","title":"API Conventions","text":"<p>All SwiftCloud API's are RESTful and follow the conventions outlined in the OpenAPI Specification. As well as other conventions, such as:</p> <p>All API endpoints are prefixed with a service name e.g <code>/domains</code> and a version number, e.g. <code>/v1</code>. to make a path of the form <code>/domains/v1</code></p>"},{"location":"notification/#http-methods","title":"HTTP Methods","text":"Method Description GET Used to retrieve a representation of a resource. POST Used to create new new resources and sub-resources PUT Used to update existing resources PATCH Used to update existing resources DELETE Used to delete existing resources"},{"location":"notification/#http-response-codes","title":"HTTP Response Codes","text":"<p>All API endpoints under the SwiftCloud platform return the following HTTP responses and the meaning of which should be taken as indicated below:</p> HTTP Status Code Meaning Description 100 Operation created The request is being processed in the background. 200 OK The request was successful. 201 Created The request was successful and a resource was created. 202 Accepted The request was successful and the response is being processed asynchronously. 204 No Content The server successfully fulfilled the request and there is no additional content to send. 400 Bad Request You submitted an invalid request (missing parameters, etc.). 401 Unauthorized You failed to authenticate for this resource. 403 Forbidden You are authenticated, but don't have permission to do this. 404 Not Found The resource you're requesting does not exist. 405 Method Not Allowed You tried to access a resource with an invalid method. 409 Conflict The request could not be completed due to a conflict with the current state of the resource. 422 Unprocessable Entity The client submitted malformed data 429 Too Many Requests You've hit a rate limit. 500 Internal Server Error Some went wrong on the server side. 503 Unable to complete request The server is overloaded or down for maintenance."},{"location":"payment/","title":"Payment","text":"<p>Payment service is another service that is used to process payments.</p>"},{"location":"postgres/","title":"PostgreSQL","text":"<p>The PostgreSQL Database As A Service (DBaaS) is built on top of kubernetes using the Cloud Native PG operator.</p>"},{"location":"vm/","title":"Virtual Machines","text":""},{"location":"vm/#the-future-of-infrastructure","title":"The Future of Infrastructure","text":"<p>Highly Available Virtual Machines offer a groundbreaking approach to infrastructure management, eliminating the need for traditional server provisioning and maintenance. By focusing on your applications, you can significantly reduce operational overhead and accelerate development cycles.</p> <ul> <li> Scalability: Automatically adjust to changing workloads, ensuring optimal performance without manual intervention.</li> <li> Cost Efficiency: Pay only for the resources consumed, eliminating the need for upfront investments or overprovisioning.</li> <li> Ease of Use: Seamless integration with modern development frameworks and tools, simplifying infrastructure management tasks.</li> <li> Reliability: Benefit from built-in redundancy and fault tolerance, ensuring high availability and data durability.</li> </ul> <p>Introducing <code>SwiftCloud Virtual Machines\u2014</code>your ultimate solution for resilient, high-performance computing that just works, no matter what. Imagine having virtual machines that are as dependable as a high-tech safety net, seamlessly healing themselves and bouncing back no matter where they\u2019re deployed.</p>"},{"location":"vm/#what-are-swiftcloud-virtual-machines","title":"What are SwiftCloud Virtual Machines?","text":"<p>Think of SwiftCloud Virtual Machines as your virtual powerhouse, ready to tackle any task with remarkable reliability. These aren\u2019t just any virtual machines; they\u2019re designed to keep running smoothly, even if things go sideways. Whether you're scaling up for a big project or handling everyday tasks, our virtual machines have got your back.</p>"},{"location":"vm/#self-healing-technology","title":"Self-Healing Technology","text":"<p>Imagine a machine that knows how to fix itself. If something goes wrong, <code>SwiftCloud Virtual Machines</code> automatically detect and resolve issues. This means that if a problem arises, you don't have to worry about downtime or manual intervention. The system identifies the problem, takes corrective actions, and restores optimal performance without you lifting a finger. It's like having a 24/7 support team built right into your virtual infrastructure, ensuring that your operations stay smooth and uninterrupted.</p>"},{"location":"vm/#scalability-and-flexibility","title":"Scalability and Flexibility","text":"<p>SwiftCloud Virtual Machines are designed to adapt to your needs. Whether you're launching a new application, expanding your infrastructure, or scaling down after a big project, our virtual machines provide the flexibility to adjust resources dynamically. You can easily scale up or down, ensuring you only pay for what you use and never overcommit.</p>"},{"location":"vm/#performance-and-efficiency","title":"Performance and Efficiency","text":"<p>With SwiftCloud Virtual Machines, expect top-notch performance. Our advanced architecture ensures that your virtual machines run with exceptional speed and efficiency. We optimize for low latency and high throughput, so your applications and workloads operate at their best.</p>"},{"location":"vm/#seamless-integration","title":"Seamless Integration","text":"<p>SwiftCloud Virtual Machines integrate effortlessly with your existing systems and workflows. They are designed to work harmoniously with your current tools and technologies, providing a seamless experience whether you\u2019re running legacy applications or cutting-edge software.</p>"},{"location":"vm/#robust-security","title":"Robust Security","text":"<p>Security is a top priority with <code>SwiftCloud Virtual Machines</code>. We employ rigorous security measures, including encrypted data transfers, secure access controls, and regular vulnerability assessments. Your data and applications are protected with industry-leading security protocols.</p>"},{"location":"vm/#user-friendly-management","title":"User-Friendly Management","text":"<p>Managing your virtual machines is straightforward with our intuitive interface. You can monitor performance, allocate resources, and troubleshoot issues with ease. Our user-friendly dashboard gives you complete control and visibility, so you can focus on what matters most\u2014your business.</p> <p>In summary, <code>SwiftCloud Virtual Machines</code> offer a powerful blend of reliability, performance, and ease of use. With self-healing technology, flexible scaling, and robust security, they provide a dependable foundation for all your computing needs.</p>"},{"location":"web-service/","title":"Web Service","text":""},{"location":"web-service/#the-future-of-computing","title":"The Future of Computing","text":"<p>Serverless computing allows you to build and run applications without managing servers. Focus on code, not infrastructure.</p> <ul> <li> Scalability: Automatically scales up or down based on demand.</li> <li> Cost Efficiency: Pay only for what you use\u2014no upfront costs or over-provisioning.</li> </ul>"},{"location":"web-service/#what-is-web-service","title":"What is Web Service?","text":"<p>Imagine your digital world without the hassle of managing servers. Web Service is our cutting-edge cloud service that lets you run applications and process data as effortlessly as flipping a switch. No need for bulky, always-on servers. Just focus on your tasks, and let SwiftCloud handle the heavy lifting with its intuitive, serverless technology.</p>"},{"location":"web-service/#effortless-scaling","title":"Effortless Scaling","text":"<p>Picture this: You\u2019re hosting a big event. Your website suddenly gets a flood of visitors. With traditional servers, you\u2019d be stuck with a hefty bill for idle time. But with SwiftCloud Web Service, it's different. Our smart system automatically adjusts to your needs. When your traffic peaks, SwiftCloud Web Service ramps up instantly\u2014just like adding extra seats to a full restaurant. And when things quiet down, it scales down to zero, leaving you with nothing to worry about but your next big idea.</p>"},{"location":"web-service/#pay-only-for-what-you-use","title":"Pay Only for What You Use","text":"<p>Think of SwiftCloud web service like a high-end coffee shop where you\u2019re only charged for the coffee you drink, not the whole pot. Every moment of computing power you use is billed precisely\u2014no more, no less. This means you only pay for the time and resources you actually need, making it incredibly cost-effective.</p>"},{"location":"web/","title":"Web services","text":""},{"location":"api/dns/","title":"DNS","text":"<p>The swiftCloud authoritative nameservers, i.e ns1.osystems.africa and ns2.osystems.africa, are DNS servers. These servers are used to respond to the queries made for the DNS zones managed by the nameservers.</p>"},{"location":"api/dns/#api","title":"API","text":""},{"location":"api/dns/#dns-api-v10","title":"DNS API v1.0","text":""},{"location":"api/dns/#servers","title":"Servers","text":"Description URL https://graph.swiftcloud.co.zm https://graph.swiftcloud.co.zm"},{"location":"api/dns/#default","title":"default","text":""},{"location":"api/dns/#get-apiv1serverslocalhostzones","title":"GET /api/v1/servers/localhost/zones","text":"<p>List Zones</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#post-apiv1serverslocalhostzones","title":"POST /api/v1/servers/localhost/zones","text":"<p>Create Zone</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"name\": \"example.co.zm.\",\n    \"kind\": \"Native\",\n    \"masters\": [],\n    \"nameservers\": [\n        \"ns1.osystems.africa.\",\n        \"ns2.osystems.africa.\"\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"example\": {\n        \"name\": \"example.co.zm.\",\n        \"kind\": \"Native\",\n        \"masters\": [],\n        \"nameservers\": [\n            \"ns1.osystems.africa.\",\n            \"ns2.osystems.africa.\"\n        ]\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#get-apiv1serverslocalhostzonesexamplecozm","title":"GET /api/v1/servers/localhost/zones/example.co.zm.","text":"<p>List Zone</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#patch-apiv1serverslocalhostzonesexamplecozm","title":"PATCH /api/v1/servers/localhost/zones/example.co.zm.","text":"<p>Modify RRSets</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"rrsets\": [\n        {\n            \"name\": \"test.example.co.zm.\",\n            \"type\": \"A\",\n            \"ttl\": 3600,\n            \"changetype\": \"REPLACE\",\n            \"records\": [\n                {\n                    \"content\": \"192.168.0.5\",\n                    \"disabled\": false\n                },\n                {\n                    \"content\": \"192.168.1.5\",\n                    \"disabled\": false\n                }\n            ]\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"example\": {\n        \"rrsets\": [\n            {\n                \"name\": \"test.example.co.zm.\",\n                \"type\": \"A\",\n                \"ttl\": 3600,\n                \"changetype\": \"REPLACE\",\n                \"records\": [\n                    {\n                        \"content\": \"192.168.0.5\",\n                        \"disabled\": false\n                    },\n                    {\n                        \"content\": \"192.168.1.5\",\n                        \"disabled\": false\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#delete-apiv1serverslocalhostzonesexampleorg","title":"DELETE /api/v1/servers/localhost/zones/example.org.","text":"<p>Delete Zone</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#get-apiv1serverslocalhostzonesexamplecozmcryptokeys","title":"GET /api/v1/servers/localhost/zones/example.co.zm./cryptokeys","text":"<p>Show Crypto Keys</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#post-apiv1serverslocalhostzonesexamplecozmcryptokeys","title":"POST /api/v1/servers/localhost/zones/example.co.zm./cryptokeys","text":"<p>Create Crypto Key</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p>Request body</p> application/json <p><pre><code>{\n    \"keytype\": \"ksk\",\n    \"active\": true\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"example\": {\n        \"keytype\": \"ksk\",\n        \"active\": true\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#delete-apiv1serverslocalhostzonesexamplecozmcryptokeys1","title":"DELETE /api/v1/servers/localhost/zones/example.co.zm./cryptokeys/1","text":"<p>Delete Key</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>apikeyAuth</code> header string N/A No <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/dns/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description apikeyAuth http apikey"},{"location":"api/domains/","title":"Domain","text":""},{"location":"api/domains/#api","title":"API","text":""},{"location":"api/domains/#swiftdns-v10","title":"SwiftDNS v1.0","text":""},{"location":"api/domains/#servers","title":"Servers","text":"Description URL https://graph.swiftcloud.co.zm https://graph.swiftcloud.co.zm"},{"location":"api/domains/#default","title":"default","text":""},{"location":"api/domains/#get-000apiv10listzones","title":"GET /000/api/v1.0/list/zones","text":"<p>List Zones</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/domains/#get-apiv10usere37be691-a30a-4586-80b0-08f5d6456389zones","title":"GET /api/v1.0/user/e37be691-a30a-4586-80b0-08f5d6456389/zones","text":"<p>User Domains</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/domains/#get-apiv10diggooglecom","title":"GET /api/v1.0/dig/google.com","text":"<p>DIG</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/domains/#get-apiv10listzonesexamplecozm","title":"GET /api/v1.0/list/zones/example.co.zm","text":"<p>List Zone</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/domains/#post-apiv10createzones","title":"POST /api/v1.0/create/zones","text":"<p>Create Zone</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p>Request body</p> application/json <p><pre><code>{\n    \"name\": \"localhost.org.zm.\",\n    \"kind\": \"Native\",\n    \"nameservers\": [\n        \"ns1.osystems.africa.\",\n        \"ns2.osystems.africa.\"\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"example\": {\n        \"name\": \"localhost.org.zm.\",\n        \"kind\": \"Native\",\n        \"nameservers\": [\n            \"ns1.osystems.africa.\",\n            \"ns2.osystems.africa.\"\n        ]\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/domains/#patch-apiv10updatezonesexamplecozm","title":"PATCH /api/v1.0/update/zones/example.co.zm.","text":"<p>Update DNS Zone Records</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p>Request body</p> application/json <p><pre><code>{\n    \"rrsets\": [\n        {\n            \"name\": \"test.example.co.zm.\",\n            \"type\": \"A\",\n            \"ttl\": 3600,\n            \"changetype\": \"REPLACE\",\n            \"records\": [\n                {\n                    \"content\": \"192.168.0.5\",\n                    \"disabled\": false\n                },\n                {\n                    \"content\": \"192.168.1.5\",\n                    \"disabled\": false\n                },\n                {\n                    \"content\": \"192.168.4.5\",\n                    \"disabled\": false\n                }\n            ]\n        }\n    ]\n}\n</code></pre> \u26a0\ufe0f This example has been generated automatically from the schema and it is not accurate. Refer to the schema for more information.</p> Schema of the request body <pre><code>{\n    \"type\": \"object\",\n    \"example\": {\n        \"rrsets\": [\n            {\n                \"name\": \"test.example.co.zm.\",\n                \"type\": \"A\",\n                \"ttl\": 3600,\n                \"changetype\": \"REPLACE\",\n                \"records\": [\n                    {\n                        \"content\": \"192.168.0.5\",\n                        \"disabled\": false\n                    },\n                    {\n                        \"content\": \"192.168.1.5\",\n                        \"disabled\": false\n                    },\n                    {\n                        \"content\": \"192.168.4.5\",\n                        \"disabled\": false\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre> <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/domains/#delete-apiv10deletezonesexamplecozm","title":"DELETE /api/v1.0/delete/zones/example.co.zm.","text":"<p>Delete Zone</p> <p>Input parameters</p> Parameter In Type Default Nullable Description <code>bearerAuth</code> header string N/A No JWT Bearer token <p> Response 200 OK </p> application/json Schema of the response body <pre><code>\n</code></pre>"},{"location":"api/domains/#security-schemes","title":"Security schemes","text":"Name Type Scheme Description bearerAuth http bearer"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/","title":"How to Create a Cloud Image","text":""},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-1-download-oracle-linux-iso","title":"Step 1: Download Oracle Linux ISO","text":"<p>Download the Oracle Linux ISO from the Oracle website or the Oracle Linux yum server. For example, let's assume you have downloaded the Oracle Linux 8 ISO file and placed it in the /path/to/iso directory.</p>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-2-set-up-a-virtual-machine","title":"Step 2: Set Up a Virtual Machine","text":"<p>Assuming you have KVM installed on your system, create a new VM or use an existing VM. Replace , , , and  with appropriate values. <pre><code>virt-install \\\n  --name &lt;vm_name&gt; \\\n  --ram &lt;memory_size&gt; \\\n  --vcpus &lt;cpu_cores&gt; \\\n  --disk size=&lt;disk_size&gt; \\\n  --os-variant=oraclelinux8 \\\n  --cdrom /path/to/iso/oraclelinux-8.x-x86_64-dvd.iso \\\n  --network bridge=&lt;bridge_interface&gt; \\\n  --graphics spice \\\n  --virt-type kvm \\\n  --import\n</code></pre>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-3-customize-the-vm","title":"Step 3: Customize the VM","text":"<p>Start the VM and follow the standard Oracle Linux installation process to customize the system according to your requirements.</p>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-4-remove-unnecessary-components","title":"Step 4: Remove Unnecessary Components","text":"<p>Use YUM to remove unnecessary components. For example, to remove the sendmail package:</p> <pre><code>sudo yum remove sendmail\n</code></pre>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-5-configure-networking","title":"Step 5: Configure Networking","text":"<p>Ensure that the network is set up correctly on the VM. Update the network configuration file, usually located at /etc/sysconfig/network-scripts/ifcfg-eth0. Adjust the settings according to your network setup:</p> <pre><code>sudo vi /etc/sysconfig/network-scripts/ifcfg-eth0\n</code></pre>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-6-enable-cloud-init","title":"Step 6: Enable Cloud-Init","text":"<p>Install and enable cloud-init on the Oracle Linux VM:</p> <pre><code>sudo yum install cloud-init\nsudo systemctl enable cloud-init\nsudo systemctl enable cloud-config\nsudo systemctl enable cloud-final\n</code></pre>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-7-prepare-disk-for-image-creation","title":"Step 7: Prepare Disk for Image Creation","text":"<p>Before creating the image, clean up the VM's disk:</p>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#clear-package-manager-cache","title":"Clear package manager cache","text":"<pre><code>sudo yum clean all\n</code></pre>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#remove-old-kernel-packages-optional","title":"Remove old kernel packages (optional)","text":"<pre><code>sudo package-cleanup --oldkernels --count=1\n</code></pre> <p>Zero out free space to reduce image size (optional)</p> <pre><code>sudo dd if=/dev/zero of=/EMPTY bs=1M\nsudo rm -f /EMPTY\n</code></pre>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-8-compress-the-image","title":"Step 8: Compress the Image","text":"<p>Compress the VM's disk into qcow2 format using qemu-img:</p> <pre><code>sudo qemu-img convert -f raw -O qcow2 /path/to/your/vm-disk.img /path/to/your/output_image.qcow2\n</code></pre>"},{"location":"blog/2024/09/11/how-to-create-a-cloud-image/#step-9-upload-image-to-kvm","title":"Step 9: Upload Image to KVM","text":"<p>Transfer the compressed image (qcow2 file) to the KVM host. You can use tools like SCP, SFTP, or any other file transfer method supported by your environment.</p> <p>After completing these steps, you can then import the custom Oracle Linux image into KVM and create new VM instances based on it. Use KVM's management tools (virsh, Virt-Manager, etc.) to manage these instances.</p>"},{"location":"blog/2024/09/11/k3s-node-not-ready/","title":"K3S Node Not Ready","text":"<p>K3S is a lightweight production grade kubernetes platform. Its light weight because a lot of unnecessary components have been removed; the unnecessary components include cloud providers, beta features, defaults and the deployment runs in a single binary.</p> <p>Having a single binary makes the deployment a whole lot easier. And now back to the topic of discussion.</p> <p>NotReady status can be caused by a lot of things, it might be that the node was initially connected to the cluster but is no longer able to communicate with the cluster or the underlying machine is not active. This can be fixed by either starting up the machine if it's off or making sure that the node is able to establish two communication with other nodes in the cluster. This in most cases will turn out to be the underlying host machines networking.</p> <p>If upon checking on the machine, and it turns out that the machine is running and network connectivity is just fine. Check on the status of the node status using <code>kubectl</code>.</p> <pre><code>kubectl describe node &lt;node-hostname&gt;\n</code></pre> <p>The above command gives an very verbose out put of the state of the node. Among the things to look out for in this output are, memory pressure, disk pressure, PID pressure.</p> <p>A pressure in any of the above can cause the kubelet to fail to run and hence, the node not being usable.</p> <p>If you notice that the kubelet is not able to start due to memory pressure or CPU &amp; memory limits going going beyond 100%. This is a sign of over-committing resources on your node. This happens when the sum of all Kubernetes resource limits is bigger than the capacity of that resource. When you are over-committing resources in your cluster, everything might run perfectly in normal conditions, but in high load scenarios, the containers could start consuming CPU and memory up to their limit. And in some instances make your node unavailable.</p> <p>To make your node available with over-committed resources, you'll need to allow this in your kernel, by creating a file in <code>/etc/sysctl.d</code>, lets call this file <code>/etc/sysctl.d/50-kubelet.conf</code>. In that file, add the following:</p> <p><pre><code>kernel.panic=10\nkernel.panic_on_oops=1\nvm.overcommit_memory=1\n</code></pre> To enble the changes just added, execute:</p> <pre><code>sysctl --system -p\n</code></pre> <p>After this, restart the k3s daemon if need be (K3S is set to auto-restart by default).</p> <p>Another issue that might bring up such an issue is the the <code>invalidDiskCapacity 0</code>. This is just a warning that normally clears up after sometime, but during the time it shows up, the node wont be available. For further debugging check the github issue #1857.</p> <p>While the above will allow the node to be available with over-committed resources, this is not good practice. To solve this issue you might need to add compute resource limits in your service deployment files that are well within your nodes range.</p> <p>An even better approach is to set the limits with role(s)/clusterRole(s) so pods cannot use more than allocated.</p>"},{"location":"blog/2024/09/11/setting-up-openzfs-on-rocky-linux/","title":"Setting Up OpenZFS on Rocky Linux","text":"<p>The RHEL distribution of OpenZFS has two main implementations of ZFS, outlined below:</p> <ol> <li> <p>DKIMS (Dynamic Kernel Module Support) This implementation is built on the premise that; the system should automatically recompile all DKMS modules if a new kernel version is installed. This allows drivers and devices outside the mainline kernel to continue working after a Linux kernel upgrade.</p> </li> <li> <p>kABI-tracking kmod packages The Kernel Application Binary Interface (kABI) is a set of in-kernel symbols used by drivers and other kernel modules. Each major and minor RHEL kernel release has a bunch of in-kernel symbols that are whitelisted. A kABI-tracking kmod package contains a kernel module that is compatible with a given kABI, that is, for a given major and minor release of the EL kernel.</p> </li> </ol> <p>The RHEL OpenZFS packages are provided by the following repository:</p> <p>For EL7:</p> <pre><code>yum install https://zfsonlinux.org/epel/zfs-release-2-3$(rpm --eval \"%{dist}\").noarch.rpm\n</code></pre> <p>and for EL8 and 9:</p> <pre><code>dnf install https://zfsonlinux.org/epel/zfs-release-2-3$(rpm --eval \"%{dist}\").noarch.rpm\n</code></pre> <p>After adding that repository, update your repository cache with either;</p> <p>EL7</p> <pre><code>yum update -y\n</code></pre> <p>EL8 And above</p> <pre><code>dnf update -y\n</code></pre> <p>After that, you have the option to install either the DKMS or kABI-tracking kmod style packages. I have not had any luck using the DKMS style package (which is the default) and as such, my personal preference is the kABI-tracking.</p> <p>The commands that follow will only show how to install OpenZFS using EL 8 and above if you need to do this for EL 7 and below; replace <code>dnf</code> with <code>yum</code> and <code>dnf config-manager</code> with <code>yum-config-manager</code></p> <p>DKMS</p> <p>Installing the DKMS style, requires the following three (3) commands:</p> <pre><code>dnf install -y epel-release\ndnf install -y kernel-devel\ndnf install -y zfs\n</code></pre> <p>kABI Style</p> <p>Installing the kABI-Tracking kmod, disable the default DKMS style and then install zfs with the following commands.</p> <pre><code>dnf config-manager --disable zfs\ndnf config-manager --enable zfs-kmod\ndnf install zfs\n</code></pre> <p>By default, the OpenZFS kernel modules are automatically loaded when a ZFS pool is detected. If you would prefer to always load the modules at boot time you can create such configuration in <code>/etc/modules-load.d</code>:</p> <p>Below is a helper command:</p> <pre><code>echo zfs &gt;/etc/modules-load.d/zfs.conf\n</code></pre> <p>After that, you can confirm if zfs is properly set by using modprobe, as shown below:</p> <pre><code>/sbin/modprobe zfs\n</code></pre> <p>If you get an empty response, then all is well. Otherwise, get a cup of coffee and have fun debugging the issue.</p>"},{"location":"blog/2024/11/11/swiftcloud-resource-creation/","title":"SwiftCloud Resource Creation","text":"<p>SwiftCloud service creation is a process that involves defining and provisioning resources within the SwiftCloud platform. These resources can include virtual machines, networks, storage, and other infrastructure components. Below we outline a typical technical workflow for creating resources in SwiftCloud.</p>"},{"location":"blog/2024/11/11/swiftcloud-resource-creation/#event-driven-architecture","title":"Event Driven Architecture","text":"<p>SwiftCloud follows an event-driven architecture, where events trigger actions and workflows. This approach allows for flexible and scalable resource creation. To achieve this, we use a combination of tools and technologies, including:</p> <ul> <li>Knative Eventing: A serverless eventing platform that enables the creation of event-driven applications.</li> <li>RabbitMQ: A message broker that facilitates communication between different components in the SwiftCloud platform.</li> <li>Kubernetes: The underlying container orchestration platform that manages and deploys resources.</li> </ul>"},{"location":"blog/2024/11/11/swiftcloud-resource-creation/#workflow-services","title":"Workflow Services","text":"<p>The involves mainly three services:</p> <ul> <li>Frontend: The frontend service is responsible for handling user requests and interacting with the backend services. It receives user requests, validates them, and sends them to the backend services. The frontend service also handles user authentication and authorization.</li> <li>Billing: The billing service is responsible for managing the billing and pricing of resources in SwiftCloud. It calculates the cost of resources based on usage and billing cycles. The billing service is also responsible for generating invoices and tracking payments.</li> <li>Service Cluster Manager: The service cluster manager is responsible for managing the lifecycle of services in SwiftCloud. It creates, updates, and deletes services based on user requests. The service cluster manager also manages the configuration of services, such as scaling, networking, and storage.</li> </ul>"},{"location":"blog/2024/11/11/swiftcloud-resource-creation/#workflow-lifecycle","title":"Workflow Lifecycle","text":"<p>The service creation workflow in SwiftCloud is initiated by the frontend service, which receives user requests and validates them. The frontend service then sends the user request to the billing service, which calculates the cost of the resource and generates an invoice. The billing service then sends the invoice to the frontend service, which displays it to the user. This action also creates a background process to check the status of the payment, depending on the payment status, the service cluster manager creates the resource.</p>"},{"location":"blog/2024/11/11/swiftcloud-resource-creation/#workflow-diagram","title":"Workflow Diagram","text":"<pre><code>\nflowchart LR\n    subgraph Event Broker\n        direction LR\n        eb[RabbitMQ]\n    end\n    subgraph Billing\n        direction TB\n        bb{Payment} --&gt;|Generate Invoice| ba[Invoice]\n    end\n    subgraph Cluster-Manager\n        direction TB\n        ca[VM]\n        cb[Web Service]\n        cc[Databases]\n        cd[Domains]\n    end\n    eb --&gt;|Display invoice| frontend\n    ba --&gt;|publish invoice| eb\n    eb --&gt; Cluster-Manager\n    eb --&gt;|Initiate resource creation| bb\n    frontend ---&gt;|Initiate resource creation| eb</code></pre>"},{"location":"blog/2024/11/11/swiftcloud-resource-creation/#sequence-diagram","title":"Sequence Diagram","text":"<pre><code>sequenceDiagram\n    participant Frontend\n    participant Event Broker\n    participant Billing\n    participant Cluster Manager\n\n    Frontend-&gt;&gt;Event Broker: Initiate resource creation\n    Event Broker-&gt;&gt;Billing: Calculate invoice\n    Billing-&gt;&gt;Event Broker: Publish invoice\n    Event Broker-&gt;&gt;Frontend: Display invoice\n    Frontend-&gt;&gt;Event Broker: Initiate resource creation payment\n    Event Broker-&gt;&gt;Billing: Check payment status\n    loop Check payment status\n    Billing-&gt;&gt;Billing: Check payment status\n    end\n    Billing-&gt;&gt;Event Broker: Publish success payment status\n    Event Broker-&gt;&gt;Cluster Manager: Create resource</code></pre>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/cloud/","title":"cloud","text":""},{"location":"blog/category/vps/","title":"vps","text":""},{"location":"blog/category/k8s/","title":"k8s","text":""},{"location":"references/","title":"References","text":"<p>Following is a list of relevant tags:</p>"},{"location":"references/#architecure","title":"Architecure","text":"<ul> <li>Home</li> </ul>"},{"location":"references/#philosophy","title":"Philosophy","text":"<ul> <li>Home</li> </ul>"}]}